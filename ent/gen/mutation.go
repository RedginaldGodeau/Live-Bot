// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend/ent/gen/liveshow"
	"backend/ent/gen/predicate"
	"backend/ent/gen/upload"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLiveShow = "LiveShow"
	TypeUpload   = "Upload"
)

// LiveShowMutation represents an operation that mutates the LiveShow nodes in the graph.
type LiveShowMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	legend        *string
	duration      *int
	addduration   *int
	viewed        *bool
	currentPlayed *bool
	started_time  *time.Time
	ended_time    *time.Time
	clearedFields map[string]struct{}
	upload        *int
	clearedupload bool
	done          bool
	oldValue      func(context.Context) (*LiveShow, error)
	predicates    []predicate.LiveShow
}

var _ ent.Mutation = (*LiveShowMutation)(nil)

// liveshowOption allows management of the mutation configuration using functional options.
type liveshowOption func(*LiveShowMutation)

// newLiveShowMutation creates new mutation for the LiveShow entity.
func newLiveShowMutation(c config, op Op, opts ...liveshowOption) *LiveShowMutation {
	m := &LiveShowMutation{
		config:        c,
		op:            op,
		typ:           TypeLiveShow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLiveShowID sets the ID field of the mutation.
func withLiveShowID(id int) liveshowOption {
	return func(m *LiveShowMutation) {
		var (
			err   error
			once  sync.Once
			value *LiveShow
		)
		m.oldValue = func(ctx context.Context) (*LiveShow, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LiveShow.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLiveShow sets the old LiveShow of the mutation.
func withLiveShow(node *LiveShow) liveshowOption {
	return func(m *LiveShowMutation) {
		m.oldValue = func(context.Context) (*LiveShow, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LiveShowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LiveShowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LiveShowMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LiveShowMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LiveShow.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *LiveShowMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *LiveShowMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the LiveShow entity.
// If the LiveShow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveShowMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *LiveShowMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetLegend sets the "legend" field.
func (m *LiveShowMutation) SetLegend(s string) {
	m.legend = &s
}

// Legend returns the value of the "legend" field in the mutation.
func (m *LiveShowMutation) Legend() (r string, exists bool) {
	v := m.legend
	if v == nil {
		return
	}
	return *v, true
}

// OldLegend returns the old "legend" field's value of the LiveShow entity.
// If the LiveShow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveShowMutation) OldLegend(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLegend is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLegend requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLegend: %w", err)
	}
	return oldValue.Legend, nil
}

// ResetLegend resets all changes to the "legend" field.
func (m *LiveShowMutation) ResetLegend() {
	m.legend = nil
}

// SetDuration sets the "duration" field.
func (m *LiveShowMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *LiveShowMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the LiveShow entity.
// If the LiveShow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveShowMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *LiveShowMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *LiveShowMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *LiveShowMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetViewed sets the "viewed" field.
func (m *LiveShowMutation) SetViewed(b bool) {
	m.viewed = &b
}

// Viewed returns the value of the "viewed" field in the mutation.
func (m *LiveShowMutation) Viewed() (r bool, exists bool) {
	v := m.viewed
	if v == nil {
		return
	}
	return *v, true
}

// OldViewed returns the old "viewed" field's value of the LiveShow entity.
// If the LiveShow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveShowMutation) OldViewed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldViewed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldViewed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViewed: %w", err)
	}
	return oldValue.Viewed, nil
}

// ResetViewed resets all changes to the "viewed" field.
func (m *LiveShowMutation) ResetViewed() {
	m.viewed = nil
}

// SetCurrentPlayed sets the "currentPlayed" field.
func (m *LiveShowMutation) SetCurrentPlayed(b bool) {
	m.currentPlayed = &b
}

// CurrentPlayed returns the value of the "currentPlayed" field in the mutation.
func (m *LiveShowMutation) CurrentPlayed() (r bool, exists bool) {
	v := m.currentPlayed
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrentPlayed returns the old "currentPlayed" field's value of the LiveShow entity.
// If the LiveShow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveShowMutation) OldCurrentPlayed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrentPlayed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrentPlayed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrentPlayed: %w", err)
	}
	return oldValue.CurrentPlayed, nil
}

// ResetCurrentPlayed resets all changes to the "currentPlayed" field.
func (m *LiveShowMutation) ResetCurrentPlayed() {
	m.currentPlayed = nil
}

// SetStartedTime sets the "started_time" field.
func (m *LiveShowMutation) SetStartedTime(t time.Time) {
	m.started_time = &t
}

// StartedTime returns the value of the "started_time" field in the mutation.
func (m *LiveShowMutation) StartedTime() (r time.Time, exists bool) {
	v := m.started_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedTime returns the old "started_time" field's value of the LiveShow entity.
// If the LiveShow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveShowMutation) OldStartedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedTime: %w", err)
	}
	return oldValue.StartedTime, nil
}

// ClearStartedTime clears the value of the "started_time" field.
func (m *LiveShowMutation) ClearStartedTime() {
	m.started_time = nil
	m.clearedFields[liveshow.FieldStartedTime] = struct{}{}
}

// StartedTimeCleared returns if the "started_time" field was cleared in this mutation.
func (m *LiveShowMutation) StartedTimeCleared() bool {
	_, ok := m.clearedFields[liveshow.FieldStartedTime]
	return ok
}

// ResetStartedTime resets all changes to the "started_time" field.
func (m *LiveShowMutation) ResetStartedTime() {
	m.started_time = nil
	delete(m.clearedFields, liveshow.FieldStartedTime)
}

// SetEndedTime sets the "ended_time" field.
func (m *LiveShowMutation) SetEndedTime(t time.Time) {
	m.ended_time = &t
}

// EndedTime returns the value of the "ended_time" field in the mutation.
func (m *LiveShowMutation) EndedTime() (r time.Time, exists bool) {
	v := m.ended_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndedTime returns the old "ended_time" field's value of the LiveShow entity.
// If the LiveShow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LiveShowMutation) OldEndedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndedTime: %w", err)
	}
	return oldValue.EndedTime, nil
}

// ClearEndedTime clears the value of the "ended_time" field.
func (m *LiveShowMutation) ClearEndedTime() {
	m.ended_time = nil
	m.clearedFields[liveshow.FieldEndedTime] = struct{}{}
}

// EndedTimeCleared returns if the "ended_time" field was cleared in this mutation.
func (m *LiveShowMutation) EndedTimeCleared() bool {
	_, ok := m.clearedFields[liveshow.FieldEndedTime]
	return ok
}

// ResetEndedTime resets all changes to the "ended_time" field.
func (m *LiveShowMutation) ResetEndedTime() {
	m.ended_time = nil
	delete(m.clearedFields, liveshow.FieldEndedTime)
}

// SetUploadID sets the "upload" edge to the Upload entity by id.
func (m *LiveShowMutation) SetUploadID(id int) {
	m.upload = &id
}

// ClearUpload clears the "upload" edge to the Upload entity.
func (m *LiveShowMutation) ClearUpload() {
	m.clearedupload = true
}

// UploadCleared reports if the "upload" edge to the Upload entity was cleared.
func (m *LiveShowMutation) UploadCleared() bool {
	return m.clearedupload
}

// UploadID returns the "upload" edge ID in the mutation.
func (m *LiveShowMutation) UploadID() (id int, exists bool) {
	if m.upload != nil {
		return *m.upload, true
	}
	return
}

// UploadIDs returns the "upload" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UploadID instead. It exists only for internal usage by the builders.
func (m *LiveShowMutation) UploadIDs() (ids []int) {
	if id := m.upload; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUpload resets all changes to the "upload" edge.
func (m *LiveShowMutation) ResetUpload() {
	m.upload = nil
	m.clearedupload = false
}

// Where appends a list predicates to the LiveShowMutation builder.
func (m *LiveShowMutation) Where(ps ...predicate.LiveShow) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LiveShowMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LiveShowMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LiveShow, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LiveShowMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LiveShowMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LiveShow).
func (m *LiveShowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LiveShowMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, liveshow.FieldCreateTime)
	}
	if m.legend != nil {
		fields = append(fields, liveshow.FieldLegend)
	}
	if m.duration != nil {
		fields = append(fields, liveshow.FieldDuration)
	}
	if m.viewed != nil {
		fields = append(fields, liveshow.FieldViewed)
	}
	if m.currentPlayed != nil {
		fields = append(fields, liveshow.FieldCurrentPlayed)
	}
	if m.started_time != nil {
		fields = append(fields, liveshow.FieldStartedTime)
	}
	if m.ended_time != nil {
		fields = append(fields, liveshow.FieldEndedTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LiveShowMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case liveshow.FieldCreateTime:
		return m.CreateTime()
	case liveshow.FieldLegend:
		return m.Legend()
	case liveshow.FieldDuration:
		return m.Duration()
	case liveshow.FieldViewed:
		return m.Viewed()
	case liveshow.FieldCurrentPlayed:
		return m.CurrentPlayed()
	case liveshow.FieldStartedTime:
		return m.StartedTime()
	case liveshow.FieldEndedTime:
		return m.EndedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LiveShowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case liveshow.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case liveshow.FieldLegend:
		return m.OldLegend(ctx)
	case liveshow.FieldDuration:
		return m.OldDuration(ctx)
	case liveshow.FieldViewed:
		return m.OldViewed(ctx)
	case liveshow.FieldCurrentPlayed:
		return m.OldCurrentPlayed(ctx)
	case liveshow.FieldStartedTime:
		return m.OldStartedTime(ctx)
	case liveshow.FieldEndedTime:
		return m.OldEndedTime(ctx)
	}
	return nil, fmt.Errorf("unknown LiveShow field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LiveShowMutation) SetField(name string, value ent.Value) error {
	switch name {
	case liveshow.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case liveshow.FieldLegend:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLegend(v)
		return nil
	case liveshow.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case liveshow.FieldViewed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViewed(v)
		return nil
	case liveshow.FieldCurrentPlayed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrentPlayed(v)
		return nil
	case liveshow.FieldStartedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedTime(v)
		return nil
	case liveshow.FieldEndedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndedTime(v)
		return nil
	}
	return fmt.Errorf("unknown LiveShow field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LiveShowMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, liveshow.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LiveShowMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case liveshow.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LiveShowMutation) AddField(name string, value ent.Value) error {
	switch name {
	case liveshow.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown LiveShow numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LiveShowMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(liveshow.FieldStartedTime) {
		fields = append(fields, liveshow.FieldStartedTime)
	}
	if m.FieldCleared(liveshow.FieldEndedTime) {
		fields = append(fields, liveshow.FieldEndedTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LiveShowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LiveShowMutation) ClearField(name string) error {
	switch name {
	case liveshow.FieldStartedTime:
		m.ClearStartedTime()
		return nil
	case liveshow.FieldEndedTime:
		m.ClearEndedTime()
		return nil
	}
	return fmt.Errorf("unknown LiveShow nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LiveShowMutation) ResetField(name string) error {
	switch name {
	case liveshow.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case liveshow.FieldLegend:
		m.ResetLegend()
		return nil
	case liveshow.FieldDuration:
		m.ResetDuration()
		return nil
	case liveshow.FieldViewed:
		m.ResetViewed()
		return nil
	case liveshow.FieldCurrentPlayed:
		m.ResetCurrentPlayed()
		return nil
	case liveshow.FieldStartedTime:
		m.ResetStartedTime()
		return nil
	case liveshow.FieldEndedTime:
		m.ResetEndedTime()
		return nil
	}
	return fmt.Errorf("unknown LiveShow field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LiveShowMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.upload != nil {
		edges = append(edges, liveshow.EdgeUpload)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LiveShowMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case liveshow.EdgeUpload:
		if id := m.upload; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LiveShowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LiveShowMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LiveShowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedupload {
		edges = append(edges, liveshow.EdgeUpload)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LiveShowMutation) EdgeCleared(name string) bool {
	switch name {
	case liveshow.EdgeUpload:
		return m.clearedupload
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LiveShowMutation) ClearEdge(name string) error {
	switch name {
	case liveshow.EdgeUpload:
		m.ClearUpload()
		return nil
	}
	return fmt.Errorf("unknown LiveShow unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LiveShowMutation) ResetEdge(name string) error {
	switch name {
	case liveshow.EdgeUpload:
		m.ResetUpload()
		return nil
	}
	return fmt.Errorf("unknown LiveShow edge %s", name)
}

// UploadMutation represents an operation that mutates the Upload nodes in the graph.
type UploadMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	file_path               *string
	name                    *string
	file_type               *upload.FileType
	clearedFields           map[string]struct{}
	live_show_upload        map[int]struct{}
	removedlive_show_upload map[int]struct{}
	clearedlive_show_upload bool
	done                    bool
	oldValue                func(context.Context) (*Upload, error)
	predicates              []predicate.Upload
}

var _ ent.Mutation = (*UploadMutation)(nil)

// uploadOption allows management of the mutation configuration using functional options.
type uploadOption func(*UploadMutation)

// newUploadMutation creates new mutation for the Upload entity.
func newUploadMutation(c config, op Op, opts ...uploadOption) *UploadMutation {
	m := &UploadMutation{
		config:        c,
		op:            op,
		typ:           TypeUpload,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUploadID sets the ID field of the mutation.
func withUploadID(id int) uploadOption {
	return func(m *UploadMutation) {
		var (
			err   error
			once  sync.Once
			value *Upload
		)
		m.oldValue = func(ctx context.Context) (*Upload, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Upload.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUpload sets the old Upload of the mutation.
func withUpload(node *Upload) uploadOption {
	return func(m *UploadMutation) {
		m.oldValue = func(context.Context) (*Upload, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UploadMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UploadMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UploadMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UploadMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Upload.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UploadMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UploadMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Upload entity.
// If the Upload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UploadMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetFilePath sets the "file_path" field.
func (m *UploadMutation) SetFilePath(s string) {
	m.file_path = &s
}

// FilePath returns the value of the "file_path" field in the mutation.
func (m *UploadMutation) FilePath() (r string, exists bool) {
	v := m.file_path
	if v == nil {
		return
	}
	return *v, true
}

// OldFilePath returns the old "file_path" field's value of the Upload entity.
// If the Upload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadMutation) OldFilePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilePath: %w", err)
	}
	return oldValue.FilePath, nil
}

// ResetFilePath resets all changes to the "file_path" field.
func (m *UploadMutation) ResetFilePath() {
	m.file_path = nil
}

// SetName sets the "name" field.
func (m *UploadMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UploadMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Upload entity.
// If the Upload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UploadMutation) ResetName() {
	m.name = nil
}

// SetFileType sets the "file_type" field.
func (m *UploadMutation) SetFileType(ut upload.FileType) {
	m.file_type = &ut
}

// FileType returns the value of the "file_type" field in the mutation.
func (m *UploadMutation) FileType() (r upload.FileType, exists bool) {
	v := m.file_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFileType returns the old "file_type" field's value of the Upload entity.
// If the Upload object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UploadMutation) OldFileType(ctx context.Context) (v upload.FileType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileType: %w", err)
	}
	return oldValue.FileType, nil
}

// ResetFileType resets all changes to the "file_type" field.
func (m *UploadMutation) ResetFileType() {
	m.file_type = nil
}

// AddLiveShowUploadIDs adds the "live_show_upload" edge to the LiveShow entity by ids.
func (m *UploadMutation) AddLiveShowUploadIDs(ids ...int) {
	if m.live_show_upload == nil {
		m.live_show_upload = make(map[int]struct{})
	}
	for i := range ids {
		m.live_show_upload[ids[i]] = struct{}{}
	}
}

// ClearLiveShowUpload clears the "live_show_upload" edge to the LiveShow entity.
func (m *UploadMutation) ClearLiveShowUpload() {
	m.clearedlive_show_upload = true
}

// LiveShowUploadCleared reports if the "live_show_upload" edge to the LiveShow entity was cleared.
func (m *UploadMutation) LiveShowUploadCleared() bool {
	return m.clearedlive_show_upload
}

// RemoveLiveShowUploadIDs removes the "live_show_upload" edge to the LiveShow entity by IDs.
func (m *UploadMutation) RemoveLiveShowUploadIDs(ids ...int) {
	if m.removedlive_show_upload == nil {
		m.removedlive_show_upload = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.live_show_upload, ids[i])
		m.removedlive_show_upload[ids[i]] = struct{}{}
	}
}

// RemovedLiveShowUpload returns the removed IDs of the "live_show_upload" edge to the LiveShow entity.
func (m *UploadMutation) RemovedLiveShowUploadIDs() (ids []int) {
	for id := range m.removedlive_show_upload {
		ids = append(ids, id)
	}
	return
}

// LiveShowUploadIDs returns the "live_show_upload" edge IDs in the mutation.
func (m *UploadMutation) LiveShowUploadIDs() (ids []int) {
	for id := range m.live_show_upload {
		ids = append(ids, id)
	}
	return
}

// ResetLiveShowUpload resets all changes to the "live_show_upload" edge.
func (m *UploadMutation) ResetLiveShowUpload() {
	m.live_show_upload = nil
	m.clearedlive_show_upload = false
	m.removedlive_show_upload = nil
}

// Where appends a list predicates to the UploadMutation builder.
func (m *UploadMutation) Where(ps ...predicate.Upload) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UploadMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UploadMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Upload, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UploadMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UploadMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Upload).
func (m *UploadMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UploadMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, upload.FieldCreateTime)
	}
	if m.file_path != nil {
		fields = append(fields, upload.FieldFilePath)
	}
	if m.name != nil {
		fields = append(fields, upload.FieldName)
	}
	if m.file_type != nil {
		fields = append(fields, upload.FieldFileType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UploadMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case upload.FieldCreateTime:
		return m.CreateTime()
	case upload.FieldFilePath:
		return m.FilePath()
	case upload.FieldName:
		return m.Name()
	case upload.FieldFileType:
		return m.FileType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UploadMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case upload.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case upload.FieldFilePath:
		return m.OldFilePath(ctx)
	case upload.FieldName:
		return m.OldName(ctx)
	case upload.FieldFileType:
		return m.OldFileType(ctx)
	}
	return nil, fmt.Errorf("unknown Upload field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UploadMutation) SetField(name string, value ent.Value) error {
	switch name {
	case upload.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case upload.FieldFilePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilePath(v)
		return nil
	case upload.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case upload.FieldFileType:
		v, ok := value.(upload.FileType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileType(v)
		return nil
	}
	return fmt.Errorf("unknown Upload field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UploadMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UploadMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UploadMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Upload numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UploadMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UploadMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UploadMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Upload nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UploadMutation) ResetField(name string) error {
	switch name {
	case upload.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case upload.FieldFilePath:
		m.ResetFilePath()
		return nil
	case upload.FieldName:
		m.ResetName()
		return nil
	case upload.FieldFileType:
		m.ResetFileType()
		return nil
	}
	return fmt.Errorf("unknown Upload field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UploadMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.live_show_upload != nil {
		edges = append(edges, upload.EdgeLiveShowUpload)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UploadMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case upload.EdgeLiveShowUpload:
		ids := make([]ent.Value, 0, len(m.live_show_upload))
		for id := range m.live_show_upload {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UploadMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlive_show_upload != nil {
		edges = append(edges, upload.EdgeLiveShowUpload)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UploadMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case upload.EdgeLiveShowUpload:
		ids := make([]ent.Value, 0, len(m.removedlive_show_upload))
		for id := range m.removedlive_show_upload {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UploadMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlive_show_upload {
		edges = append(edges, upload.EdgeLiveShowUpload)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UploadMutation) EdgeCleared(name string) bool {
	switch name {
	case upload.EdgeLiveShowUpload:
		return m.clearedlive_show_upload
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UploadMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Upload unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UploadMutation) ResetEdge(name string) error {
	switch name {
	case upload.EdgeLiveShowUpload:
		m.ResetLiveShowUpload()
		return nil
	}
	return fmt.Errorf("unknown Upload edge %s", name)
}
