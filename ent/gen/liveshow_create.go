// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend/ent/gen/liveshow"
	"backend/ent/gen/upload"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LiveShowCreate is the builder for creating a LiveShow entity.
type LiveShowCreate struct {
	config
	mutation *LiveShowMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (lsc *LiveShowCreate) SetCreateTime(t time.Time) *LiveShowCreate {
	lsc.mutation.SetCreateTime(t)
	return lsc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (lsc *LiveShowCreate) SetNillableCreateTime(t *time.Time) *LiveShowCreate {
	if t != nil {
		lsc.SetCreateTime(*t)
	}
	return lsc
}

// SetLegend sets the "legend" field.
func (lsc *LiveShowCreate) SetLegend(s string) *LiveShowCreate {
	lsc.mutation.SetLegend(s)
	return lsc
}

// SetDuration sets the "duration" field.
func (lsc *LiveShowCreate) SetDuration(i int) *LiveShowCreate {
	lsc.mutation.SetDuration(i)
	return lsc
}

// SetViewed sets the "viewed" field.
func (lsc *LiveShowCreate) SetViewed(b bool) *LiveShowCreate {
	lsc.mutation.SetViewed(b)
	return lsc
}

// SetNillableViewed sets the "viewed" field if the given value is not nil.
func (lsc *LiveShowCreate) SetNillableViewed(b *bool) *LiveShowCreate {
	if b != nil {
		lsc.SetViewed(*b)
	}
	return lsc
}

// SetCurrentPlayed sets the "currentPlayed" field.
func (lsc *LiveShowCreate) SetCurrentPlayed(b bool) *LiveShowCreate {
	lsc.mutation.SetCurrentPlayed(b)
	return lsc
}

// SetNillableCurrentPlayed sets the "currentPlayed" field if the given value is not nil.
func (lsc *LiveShowCreate) SetNillableCurrentPlayed(b *bool) *LiveShowCreate {
	if b != nil {
		lsc.SetCurrentPlayed(*b)
	}
	return lsc
}

// SetStartedTime sets the "started_time" field.
func (lsc *LiveShowCreate) SetStartedTime(t time.Time) *LiveShowCreate {
	lsc.mutation.SetStartedTime(t)
	return lsc
}

// SetNillableStartedTime sets the "started_time" field if the given value is not nil.
func (lsc *LiveShowCreate) SetNillableStartedTime(t *time.Time) *LiveShowCreate {
	if t != nil {
		lsc.SetStartedTime(*t)
	}
	return lsc
}

// SetEndedTime sets the "ended_time" field.
func (lsc *LiveShowCreate) SetEndedTime(t time.Time) *LiveShowCreate {
	lsc.mutation.SetEndedTime(t)
	return lsc
}

// SetNillableEndedTime sets the "ended_time" field if the given value is not nil.
func (lsc *LiveShowCreate) SetNillableEndedTime(t *time.Time) *LiveShowCreate {
	if t != nil {
		lsc.SetEndedTime(*t)
	}
	return lsc
}

// SetUploadID sets the "upload" edge to the Upload entity by ID.
func (lsc *LiveShowCreate) SetUploadID(id int) *LiveShowCreate {
	lsc.mutation.SetUploadID(id)
	return lsc
}

// SetNillableUploadID sets the "upload" edge to the Upload entity by ID if the given value is not nil.
func (lsc *LiveShowCreate) SetNillableUploadID(id *int) *LiveShowCreate {
	if id != nil {
		lsc = lsc.SetUploadID(*id)
	}
	return lsc
}

// SetUpload sets the "upload" edge to the Upload entity.
func (lsc *LiveShowCreate) SetUpload(u *Upload) *LiveShowCreate {
	return lsc.SetUploadID(u.ID)
}

// Mutation returns the LiveShowMutation object of the builder.
func (lsc *LiveShowCreate) Mutation() *LiveShowMutation {
	return lsc.mutation
}

// Save creates the LiveShow in the database.
func (lsc *LiveShowCreate) Save(ctx context.Context) (*LiveShow, error) {
	lsc.defaults()
	return withHooks(ctx, lsc.sqlSave, lsc.mutation, lsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lsc *LiveShowCreate) SaveX(ctx context.Context) *LiveShow {
	v, err := lsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lsc *LiveShowCreate) Exec(ctx context.Context) error {
	_, err := lsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsc *LiveShowCreate) ExecX(ctx context.Context) {
	if err := lsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lsc *LiveShowCreate) defaults() {
	if _, ok := lsc.mutation.CreateTime(); !ok {
		v := liveshow.DefaultCreateTime()
		lsc.mutation.SetCreateTime(v)
	}
	if _, ok := lsc.mutation.Viewed(); !ok {
		v := liveshow.DefaultViewed
		lsc.mutation.SetViewed(v)
	}
	if _, ok := lsc.mutation.CurrentPlayed(); !ok {
		v := liveshow.DefaultCurrentPlayed
		lsc.mutation.SetCurrentPlayed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsc *LiveShowCreate) check() error {
	if _, ok := lsc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`gen: missing required field "LiveShow.create_time"`)}
	}
	if _, ok := lsc.mutation.Legend(); !ok {
		return &ValidationError{Name: "legend", err: errors.New(`gen: missing required field "LiveShow.legend"`)}
	}
	if _, ok := lsc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`gen: missing required field "LiveShow.duration"`)}
	}
	if _, ok := lsc.mutation.Viewed(); !ok {
		return &ValidationError{Name: "viewed", err: errors.New(`gen: missing required field "LiveShow.viewed"`)}
	}
	if _, ok := lsc.mutation.CurrentPlayed(); !ok {
		return &ValidationError{Name: "currentPlayed", err: errors.New(`gen: missing required field "LiveShow.currentPlayed"`)}
	}
	return nil
}

func (lsc *LiveShowCreate) sqlSave(ctx context.Context) (*LiveShow, error) {
	if err := lsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lsc.mutation.id = &_node.ID
	lsc.mutation.done = true
	return _node, nil
}

func (lsc *LiveShowCreate) createSpec() (*LiveShow, *sqlgraph.CreateSpec) {
	var (
		_node = &LiveShow{config: lsc.config}
		_spec = sqlgraph.NewCreateSpec(liveshow.Table, sqlgraph.NewFieldSpec(liveshow.FieldID, field.TypeInt))
	)
	if value, ok := lsc.mutation.CreateTime(); ok {
		_spec.SetField(liveshow.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := lsc.mutation.Legend(); ok {
		_spec.SetField(liveshow.FieldLegend, field.TypeString, value)
		_node.Legend = value
	}
	if value, ok := lsc.mutation.Duration(); ok {
		_spec.SetField(liveshow.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := lsc.mutation.Viewed(); ok {
		_spec.SetField(liveshow.FieldViewed, field.TypeBool, value)
		_node.Viewed = value
	}
	if value, ok := lsc.mutation.CurrentPlayed(); ok {
		_spec.SetField(liveshow.FieldCurrentPlayed, field.TypeBool, value)
		_node.CurrentPlayed = value
	}
	if value, ok := lsc.mutation.StartedTime(); ok {
		_spec.SetField(liveshow.FieldStartedTime, field.TypeTime, value)
		_node.StartedTime = value
	}
	if value, ok := lsc.mutation.EndedTime(); ok {
		_spec.SetField(liveshow.FieldEndedTime, field.TypeTime, value)
		_node.EndedTime = value
	}
	if nodes := lsc.mutation.UploadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   liveshow.UploadTable,
			Columns: []string{liveshow.UploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upload.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.live_show_upload = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LiveShowCreateBulk is the builder for creating many LiveShow entities in bulk.
type LiveShowCreateBulk struct {
	config
	err      error
	builders []*LiveShowCreate
}

// Save creates the LiveShow entities in the database.
func (lscb *LiveShowCreateBulk) Save(ctx context.Context) ([]*LiveShow, error) {
	if lscb.err != nil {
		return nil, lscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lscb.builders))
	nodes := make([]*LiveShow, len(lscb.builders))
	mutators := make([]Mutator, len(lscb.builders))
	for i := range lscb.builders {
		func(i int, root context.Context) {
			builder := lscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LiveShowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lscb *LiveShowCreateBulk) SaveX(ctx context.Context) []*LiveShow {
	v, err := lscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lscb *LiveShowCreateBulk) Exec(ctx context.Context) error {
	_, err := lscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lscb *LiveShowCreateBulk) ExecX(ctx context.Context) {
	if err := lscb.Exec(ctx); err != nil {
		panic(err)
	}
}
