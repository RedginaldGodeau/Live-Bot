// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend/ent/gen/liveshow"
	"backend/ent/gen/predicate"
	"backend/ent/gen/upload"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UploadUpdate is the builder for updating Upload entities.
type UploadUpdate struct {
	config
	hooks     []Hook
	mutation  *UploadMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UploadUpdate builder.
func (uu *UploadUpdate) Where(ps ...predicate.Upload) *UploadUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetFilePath sets the "file_path" field.
func (uu *UploadUpdate) SetFilePath(s string) *UploadUpdate {
	uu.mutation.SetFilePath(s)
	return uu
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (uu *UploadUpdate) SetNillableFilePath(s *string) *UploadUpdate {
	if s != nil {
		uu.SetFilePath(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UploadUpdate) SetName(s string) *UploadUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UploadUpdate) SetNillableName(s *string) *UploadUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetFileType sets the "file_type" field.
func (uu *UploadUpdate) SetFileType(ut upload.FileType) *UploadUpdate {
	uu.mutation.SetFileType(ut)
	return uu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (uu *UploadUpdate) SetNillableFileType(ut *upload.FileType) *UploadUpdate {
	if ut != nil {
		uu.SetFileType(*ut)
	}
	return uu
}

// AddLiveShowUploadIDs adds the "live_show_upload" edge to the LiveShow entity by IDs.
func (uu *UploadUpdate) AddLiveShowUploadIDs(ids ...int) *UploadUpdate {
	uu.mutation.AddLiveShowUploadIDs(ids...)
	return uu
}

// AddLiveShowUpload adds the "live_show_upload" edges to the LiveShow entity.
func (uu *UploadUpdate) AddLiveShowUpload(l ...*LiveShow) *UploadUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.AddLiveShowUploadIDs(ids...)
}

// Mutation returns the UploadMutation object of the builder.
func (uu *UploadUpdate) Mutation() *UploadMutation {
	return uu.mutation
}

// ClearLiveShowUpload clears all "live_show_upload" edges to the LiveShow entity.
func (uu *UploadUpdate) ClearLiveShowUpload() *UploadUpdate {
	uu.mutation.ClearLiveShowUpload()
	return uu
}

// RemoveLiveShowUploadIDs removes the "live_show_upload" edge to LiveShow entities by IDs.
func (uu *UploadUpdate) RemoveLiveShowUploadIDs(ids ...int) *UploadUpdate {
	uu.mutation.RemoveLiveShowUploadIDs(ids...)
	return uu
}

// RemoveLiveShowUpload removes "live_show_upload" edges to LiveShow entities.
func (uu *UploadUpdate) RemoveLiveShowUpload(l ...*LiveShow) *UploadUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.RemoveLiveShowUploadIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UploadUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UploadUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UploadUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UploadUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UploadUpdate) check() error {
	if v, ok := uu.mutation.FileType(); ok {
		if err := upload.FileTypeValidator(v); err != nil {
			return &ValidationError{Name: "file_type", err: fmt.Errorf(`gen: validator failed for field "Upload.file_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UploadUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UploadUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UploadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(upload.Table, upload.Columns, sqlgraph.NewFieldSpec(upload.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.FilePath(); ok {
		_spec.SetField(upload.FieldFilePath, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(upload.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.FileType(); ok {
		_spec.SetField(upload.FieldFileType, field.TypeEnum, value)
	}
	if uu.mutation.LiveShowUploadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upload.LiveShowUploadTable,
			Columns: []string{upload.LiveShowUploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(liveshow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLiveShowUploadIDs(); len(nodes) > 0 && !uu.mutation.LiveShowUploadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upload.LiveShowUploadTable,
			Columns: []string{upload.LiveShowUploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(liveshow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LiveShowUploadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upload.LiveShowUploadTable,
			Columns: []string{upload.LiveShowUploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(liveshow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UploadUpdateOne is the builder for updating a single Upload entity.
type UploadUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UploadMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetFilePath sets the "file_path" field.
func (uuo *UploadUpdateOne) SetFilePath(s string) *UploadUpdateOne {
	uuo.mutation.SetFilePath(s)
	return uuo
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (uuo *UploadUpdateOne) SetNillableFilePath(s *string) *UploadUpdateOne {
	if s != nil {
		uuo.SetFilePath(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UploadUpdateOne) SetName(s string) *UploadUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UploadUpdateOne) SetNillableName(s *string) *UploadUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetFileType sets the "file_type" field.
func (uuo *UploadUpdateOne) SetFileType(ut upload.FileType) *UploadUpdateOne {
	uuo.mutation.SetFileType(ut)
	return uuo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (uuo *UploadUpdateOne) SetNillableFileType(ut *upload.FileType) *UploadUpdateOne {
	if ut != nil {
		uuo.SetFileType(*ut)
	}
	return uuo
}

// AddLiveShowUploadIDs adds the "live_show_upload" edge to the LiveShow entity by IDs.
func (uuo *UploadUpdateOne) AddLiveShowUploadIDs(ids ...int) *UploadUpdateOne {
	uuo.mutation.AddLiveShowUploadIDs(ids...)
	return uuo
}

// AddLiveShowUpload adds the "live_show_upload" edges to the LiveShow entity.
func (uuo *UploadUpdateOne) AddLiveShowUpload(l ...*LiveShow) *UploadUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.AddLiveShowUploadIDs(ids...)
}

// Mutation returns the UploadMutation object of the builder.
func (uuo *UploadUpdateOne) Mutation() *UploadMutation {
	return uuo.mutation
}

// ClearLiveShowUpload clears all "live_show_upload" edges to the LiveShow entity.
func (uuo *UploadUpdateOne) ClearLiveShowUpload() *UploadUpdateOne {
	uuo.mutation.ClearLiveShowUpload()
	return uuo
}

// RemoveLiveShowUploadIDs removes the "live_show_upload" edge to LiveShow entities by IDs.
func (uuo *UploadUpdateOne) RemoveLiveShowUploadIDs(ids ...int) *UploadUpdateOne {
	uuo.mutation.RemoveLiveShowUploadIDs(ids...)
	return uuo
}

// RemoveLiveShowUpload removes "live_show_upload" edges to LiveShow entities.
func (uuo *UploadUpdateOne) RemoveLiveShowUpload(l ...*LiveShow) *UploadUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.RemoveLiveShowUploadIDs(ids...)
}

// Where appends a list predicates to the UploadUpdate builder.
func (uuo *UploadUpdateOne) Where(ps ...predicate.Upload) *UploadUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UploadUpdateOne) Select(field string, fields ...string) *UploadUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Upload entity.
func (uuo *UploadUpdateOne) Save(ctx context.Context) (*Upload, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UploadUpdateOne) SaveX(ctx context.Context) *Upload {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UploadUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UploadUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UploadUpdateOne) check() error {
	if v, ok := uuo.mutation.FileType(); ok {
		if err := upload.FileTypeValidator(v); err != nil {
			return &ValidationError{Name: "file_type", err: fmt.Errorf(`gen: validator failed for field "Upload.file_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UploadUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UploadUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UploadUpdateOne) sqlSave(ctx context.Context) (_node *Upload, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(upload.Table, upload.Columns, sqlgraph.NewFieldSpec(upload.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Upload.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upload.FieldID)
		for _, f := range fields {
			if !upload.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != upload.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.FilePath(); ok {
		_spec.SetField(upload.FieldFilePath, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(upload.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FileType(); ok {
		_spec.SetField(upload.FieldFileType, field.TypeEnum, value)
	}
	if uuo.mutation.LiveShowUploadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upload.LiveShowUploadTable,
			Columns: []string{upload.LiveShowUploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(liveshow.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLiveShowUploadIDs(); len(nodes) > 0 && !uuo.mutation.LiveShowUploadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upload.LiveShowUploadTable,
			Columns: []string{upload.LiveShowUploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(liveshow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LiveShowUploadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   upload.LiveShowUploadTable,
			Columns: []string{upload.LiveShowUploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(liveshow.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &Upload{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upload.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
