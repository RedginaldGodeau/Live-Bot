// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend/ent/gen/liveshow"
	"backend/ent/gen/predicate"
	"backend/ent/gen/upload"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LiveShowUpdate is the builder for updating LiveShow entities.
type LiveShowUpdate struct {
	config
	hooks     []Hook
	mutation  *LiveShowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LiveShowUpdate builder.
func (lsu *LiveShowUpdate) Where(ps ...predicate.LiveShow) *LiveShowUpdate {
	lsu.mutation.Where(ps...)
	return lsu
}

// SetLegend sets the "legend" field.
func (lsu *LiveShowUpdate) SetLegend(s string) *LiveShowUpdate {
	lsu.mutation.SetLegend(s)
	return lsu
}

// SetNillableLegend sets the "legend" field if the given value is not nil.
func (lsu *LiveShowUpdate) SetNillableLegend(s *string) *LiveShowUpdate {
	if s != nil {
		lsu.SetLegend(*s)
	}
	return lsu
}

// SetDuration sets the "duration" field.
func (lsu *LiveShowUpdate) SetDuration(i int) *LiveShowUpdate {
	lsu.mutation.ResetDuration()
	lsu.mutation.SetDuration(i)
	return lsu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (lsu *LiveShowUpdate) SetNillableDuration(i *int) *LiveShowUpdate {
	if i != nil {
		lsu.SetDuration(*i)
	}
	return lsu
}

// AddDuration adds i to the "duration" field.
func (lsu *LiveShowUpdate) AddDuration(i int) *LiveShowUpdate {
	lsu.mutation.AddDuration(i)
	return lsu
}

// SetViewed sets the "viewed" field.
func (lsu *LiveShowUpdate) SetViewed(b bool) *LiveShowUpdate {
	lsu.mutation.SetViewed(b)
	return lsu
}

// SetNillableViewed sets the "viewed" field if the given value is not nil.
func (lsu *LiveShowUpdate) SetNillableViewed(b *bool) *LiveShowUpdate {
	if b != nil {
		lsu.SetViewed(*b)
	}
	return lsu
}

// SetCurrentPlayed sets the "currentPlayed" field.
func (lsu *LiveShowUpdate) SetCurrentPlayed(b bool) *LiveShowUpdate {
	lsu.mutation.SetCurrentPlayed(b)
	return lsu
}

// SetNillableCurrentPlayed sets the "currentPlayed" field if the given value is not nil.
func (lsu *LiveShowUpdate) SetNillableCurrentPlayed(b *bool) *LiveShowUpdate {
	if b != nil {
		lsu.SetCurrentPlayed(*b)
	}
	return lsu
}

// SetStartedTime sets the "started_time" field.
func (lsu *LiveShowUpdate) SetStartedTime(t time.Time) *LiveShowUpdate {
	lsu.mutation.SetStartedTime(t)
	return lsu
}

// SetNillableStartedTime sets the "started_time" field if the given value is not nil.
func (lsu *LiveShowUpdate) SetNillableStartedTime(t *time.Time) *LiveShowUpdate {
	if t != nil {
		lsu.SetStartedTime(*t)
	}
	return lsu
}

// ClearStartedTime clears the value of the "started_time" field.
func (lsu *LiveShowUpdate) ClearStartedTime() *LiveShowUpdate {
	lsu.mutation.ClearStartedTime()
	return lsu
}

// SetEndedTime sets the "ended_time" field.
func (lsu *LiveShowUpdate) SetEndedTime(t time.Time) *LiveShowUpdate {
	lsu.mutation.SetEndedTime(t)
	return lsu
}

// SetNillableEndedTime sets the "ended_time" field if the given value is not nil.
func (lsu *LiveShowUpdate) SetNillableEndedTime(t *time.Time) *LiveShowUpdate {
	if t != nil {
		lsu.SetEndedTime(*t)
	}
	return lsu
}

// ClearEndedTime clears the value of the "ended_time" field.
func (lsu *LiveShowUpdate) ClearEndedTime() *LiveShowUpdate {
	lsu.mutation.ClearEndedTime()
	return lsu
}

// SetUploadID sets the "upload" edge to the Upload entity by ID.
func (lsu *LiveShowUpdate) SetUploadID(id int) *LiveShowUpdate {
	lsu.mutation.SetUploadID(id)
	return lsu
}

// SetNillableUploadID sets the "upload" edge to the Upload entity by ID if the given value is not nil.
func (lsu *LiveShowUpdate) SetNillableUploadID(id *int) *LiveShowUpdate {
	if id != nil {
		lsu = lsu.SetUploadID(*id)
	}
	return lsu
}

// SetUpload sets the "upload" edge to the Upload entity.
func (lsu *LiveShowUpdate) SetUpload(u *Upload) *LiveShowUpdate {
	return lsu.SetUploadID(u.ID)
}

// Mutation returns the LiveShowMutation object of the builder.
func (lsu *LiveShowUpdate) Mutation() *LiveShowMutation {
	return lsu.mutation
}

// ClearUpload clears the "upload" edge to the Upload entity.
func (lsu *LiveShowUpdate) ClearUpload() *LiveShowUpdate {
	lsu.mutation.ClearUpload()
	return lsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lsu *LiveShowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lsu.sqlSave, lsu.mutation, lsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lsu *LiveShowUpdate) SaveX(ctx context.Context) int {
	affected, err := lsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lsu *LiveShowUpdate) Exec(ctx context.Context) error {
	_, err := lsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsu *LiveShowUpdate) ExecX(ctx context.Context) {
	if err := lsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lsu *LiveShowUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LiveShowUpdate {
	lsu.modifiers = append(lsu.modifiers, modifiers...)
	return lsu
}

func (lsu *LiveShowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(liveshow.Table, liveshow.Columns, sqlgraph.NewFieldSpec(liveshow.FieldID, field.TypeInt))
	if ps := lsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lsu.mutation.Legend(); ok {
		_spec.SetField(liveshow.FieldLegend, field.TypeString, value)
	}
	if value, ok := lsu.mutation.Duration(); ok {
		_spec.SetField(liveshow.FieldDuration, field.TypeInt, value)
	}
	if value, ok := lsu.mutation.AddedDuration(); ok {
		_spec.AddField(liveshow.FieldDuration, field.TypeInt, value)
	}
	if value, ok := lsu.mutation.Viewed(); ok {
		_spec.SetField(liveshow.FieldViewed, field.TypeBool, value)
	}
	if value, ok := lsu.mutation.CurrentPlayed(); ok {
		_spec.SetField(liveshow.FieldCurrentPlayed, field.TypeBool, value)
	}
	if value, ok := lsu.mutation.StartedTime(); ok {
		_spec.SetField(liveshow.FieldStartedTime, field.TypeTime, value)
	}
	if lsu.mutation.StartedTimeCleared() {
		_spec.ClearField(liveshow.FieldStartedTime, field.TypeTime)
	}
	if value, ok := lsu.mutation.EndedTime(); ok {
		_spec.SetField(liveshow.FieldEndedTime, field.TypeTime, value)
	}
	if lsu.mutation.EndedTimeCleared() {
		_spec.ClearField(liveshow.FieldEndedTime, field.TypeTime)
	}
	if lsu.mutation.UploadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   liveshow.UploadTable,
			Columns: []string{liveshow.UploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upload.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lsu.mutation.UploadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   liveshow.UploadTable,
			Columns: []string{liveshow.UploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upload.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{liveshow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lsu.mutation.done = true
	return n, nil
}

// LiveShowUpdateOne is the builder for updating a single LiveShow entity.
type LiveShowUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LiveShowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetLegend sets the "legend" field.
func (lsuo *LiveShowUpdateOne) SetLegend(s string) *LiveShowUpdateOne {
	lsuo.mutation.SetLegend(s)
	return lsuo
}

// SetNillableLegend sets the "legend" field if the given value is not nil.
func (lsuo *LiveShowUpdateOne) SetNillableLegend(s *string) *LiveShowUpdateOne {
	if s != nil {
		lsuo.SetLegend(*s)
	}
	return lsuo
}

// SetDuration sets the "duration" field.
func (lsuo *LiveShowUpdateOne) SetDuration(i int) *LiveShowUpdateOne {
	lsuo.mutation.ResetDuration()
	lsuo.mutation.SetDuration(i)
	return lsuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (lsuo *LiveShowUpdateOne) SetNillableDuration(i *int) *LiveShowUpdateOne {
	if i != nil {
		lsuo.SetDuration(*i)
	}
	return lsuo
}

// AddDuration adds i to the "duration" field.
func (lsuo *LiveShowUpdateOne) AddDuration(i int) *LiveShowUpdateOne {
	lsuo.mutation.AddDuration(i)
	return lsuo
}

// SetViewed sets the "viewed" field.
func (lsuo *LiveShowUpdateOne) SetViewed(b bool) *LiveShowUpdateOne {
	lsuo.mutation.SetViewed(b)
	return lsuo
}

// SetNillableViewed sets the "viewed" field if the given value is not nil.
func (lsuo *LiveShowUpdateOne) SetNillableViewed(b *bool) *LiveShowUpdateOne {
	if b != nil {
		lsuo.SetViewed(*b)
	}
	return lsuo
}

// SetCurrentPlayed sets the "currentPlayed" field.
func (lsuo *LiveShowUpdateOne) SetCurrentPlayed(b bool) *LiveShowUpdateOne {
	lsuo.mutation.SetCurrentPlayed(b)
	return lsuo
}

// SetNillableCurrentPlayed sets the "currentPlayed" field if the given value is not nil.
func (lsuo *LiveShowUpdateOne) SetNillableCurrentPlayed(b *bool) *LiveShowUpdateOne {
	if b != nil {
		lsuo.SetCurrentPlayed(*b)
	}
	return lsuo
}

// SetStartedTime sets the "started_time" field.
func (lsuo *LiveShowUpdateOne) SetStartedTime(t time.Time) *LiveShowUpdateOne {
	lsuo.mutation.SetStartedTime(t)
	return lsuo
}

// SetNillableStartedTime sets the "started_time" field if the given value is not nil.
func (lsuo *LiveShowUpdateOne) SetNillableStartedTime(t *time.Time) *LiveShowUpdateOne {
	if t != nil {
		lsuo.SetStartedTime(*t)
	}
	return lsuo
}

// ClearStartedTime clears the value of the "started_time" field.
func (lsuo *LiveShowUpdateOne) ClearStartedTime() *LiveShowUpdateOne {
	lsuo.mutation.ClearStartedTime()
	return lsuo
}

// SetEndedTime sets the "ended_time" field.
func (lsuo *LiveShowUpdateOne) SetEndedTime(t time.Time) *LiveShowUpdateOne {
	lsuo.mutation.SetEndedTime(t)
	return lsuo
}

// SetNillableEndedTime sets the "ended_time" field if the given value is not nil.
func (lsuo *LiveShowUpdateOne) SetNillableEndedTime(t *time.Time) *LiveShowUpdateOne {
	if t != nil {
		lsuo.SetEndedTime(*t)
	}
	return lsuo
}

// ClearEndedTime clears the value of the "ended_time" field.
func (lsuo *LiveShowUpdateOne) ClearEndedTime() *LiveShowUpdateOne {
	lsuo.mutation.ClearEndedTime()
	return lsuo
}

// SetUploadID sets the "upload" edge to the Upload entity by ID.
func (lsuo *LiveShowUpdateOne) SetUploadID(id int) *LiveShowUpdateOne {
	lsuo.mutation.SetUploadID(id)
	return lsuo
}

// SetNillableUploadID sets the "upload" edge to the Upload entity by ID if the given value is not nil.
func (lsuo *LiveShowUpdateOne) SetNillableUploadID(id *int) *LiveShowUpdateOne {
	if id != nil {
		lsuo = lsuo.SetUploadID(*id)
	}
	return lsuo
}

// SetUpload sets the "upload" edge to the Upload entity.
func (lsuo *LiveShowUpdateOne) SetUpload(u *Upload) *LiveShowUpdateOne {
	return lsuo.SetUploadID(u.ID)
}

// Mutation returns the LiveShowMutation object of the builder.
func (lsuo *LiveShowUpdateOne) Mutation() *LiveShowMutation {
	return lsuo.mutation
}

// ClearUpload clears the "upload" edge to the Upload entity.
func (lsuo *LiveShowUpdateOne) ClearUpload() *LiveShowUpdateOne {
	lsuo.mutation.ClearUpload()
	return lsuo
}

// Where appends a list predicates to the LiveShowUpdate builder.
func (lsuo *LiveShowUpdateOne) Where(ps ...predicate.LiveShow) *LiveShowUpdateOne {
	lsuo.mutation.Where(ps...)
	return lsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lsuo *LiveShowUpdateOne) Select(field string, fields ...string) *LiveShowUpdateOne {
	lsuo.fields = append([]string{field}, fields...)
	return lsuo
}

// Save executes the query and returns the updated LiveShow entity.
func (lsuo *LiveShowUpdateOne) Save(ctx context.Context) (*LiveShow, error) {
	return withHooks(ctx, lsuo.sqlSave, lsuo.mutation, lsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lsuo *LiveShowUpdateOne) SaveX(ctx context.Context) *LiveShow {
	node, err := lsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lsuo *LiveShowUpdateOne) Exec(ctx context.Context) error {
	_, err := lsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsuo *LiveShowUpdateOne) ExecX(ctx context.Context) {
	if err := lsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lsuo *LiveShowUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LiveShowUpdateOne {
	lsuo.modifiers = append(lsuo.modifiers, modifiers...)
	return lsuo
}

func (lsuo *LiveShowUpdateOne) sqlSave(ctx context.Context) (_node *LiveShow, err error) {
	_spec := sqlgraph.NewUpdateSpec(liveshow.Table, liveshow.Columns, sqlgraph.NewFieldSpec(liveshow.FieldID, field.TypeInt))
	id, ok := lsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "LiveShow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, liveshow.FieldID)
		for _, f := range fields {
			if !liveshow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != liveshow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lsuo.mutation.Legend(); ok {
		_spec.SetField(liveshow.FieldLegend, field.TypeString, value)
	}
	if value, ok := lsuo.mutation.Duration(); ok {
		_spec.SetField(liveshow.FieldDuration, field.TypeInt, value)
	}
	if value, ok := lsuo.mutation.AddedDuration(); ok {
		_spec.AddField(liveshow.FieldDuration, field.TypeInt, value)
	}
	if value, ok := lsuo.mutation.Viewed(); ok {
		_spec.SetField(liveshow.FieldViewed, field.TypeBool, value)
	}
	if value, ok := lsuo.mutation.CurrentPlayed(); ok {
		_spec.SetField(liveshow.FieldCurrentPlayed, field.TypeBool, value)
	}
	if value, ok := lsuo.mutation.StartedTime(); ok {
		_spec.SetField(liveshow.FieldStartedTime, field.TypeTime, value)
	}
	if lsuo.mutation.StartedTimeCleared() {
		_spec.ClearField(liveshow.FieldStartedTime, field.TypeTime)
	}
	if value, ok := lsuo.mutation.EndedTime(); ok {
		_spec.SetField(liveshow.FieldEndedTime, field.TypeTime, value)
	}
	if lsuo.mutation.EndedTimeCleared() {
		_spec.ClearField(liveshow.FieldEndedTime, field.TypeTime)
	}
	if lsuo.mutation.UploadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   liveshow.UploadTable,
			Columns: []string{liveshow.UploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upload.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lsuo.mutation.UploadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   liveshow.UploadTable,
			Columns: []string{liveshow.UploadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upload.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lsuo.modifiers...)
	_node = &LiveShow{config: lsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{liveshow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lsuo.mutation.done = true
	return _node, nil
}
