// Code generated by ent, DO NOT EDIT.

package upload

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the upload type in the database.
	Label = "upload"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldFilePath holds the string denoting the file_path field in the database.
	FieldFilePath = "file_path"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFileType holds the string denoting the file_type field in the database.
	FieldFileType = "file_type"
	// EdgeLiveShowUpload holds the string denoting the live_show_upload edge name in mutations.
	EdgeLiveShowUpload = "live_show_upload"
	// Table holds the table name of the upload in the database.
	Table = "uploads"
	// LiveShowUploadTable is the table that holds the live_show_upload relation/edge.
	LiveShowUploadTable = "live_shows"
	// LiveShowUploadInverseTable is the table name for the LiveShow entity.
	// It exists in this package in order to avoid circular dependency with the "liveshow" package.
	LiveShowUploadInverseTable = "live_shows"
	// LiveShowUploadColumn is the table column denoting the live_show_upload relation/edge.
	LiveShowUploadColumn = "live_show_upload"
)

// Columns holds all SQL columns for upload fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldFilePath,
	FieldName,
	FieldFileType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)

// FileType defines the type for the "file_type" enum field.
type FileType string

// FileType values.
const (
	FileTypeImage FileType = "image"
	FileTypeVideo FileType = "video"
)

func (ft FileType) String() string {
	return string(ft)
}

// FileTypeValidator is a validator for the "file_type" field enum values. It is called by the builders before save.
func FileTypeValidator(ft FileType) error {
	switch ft {
	case FileTypeImage, FileTypeVideo:
		return nil
	default:
		return fmt.Errorf("upload: invalid enum value for file_type field: %q", ft)
	}
}

// OrderOption defines the ordering options for the Upload queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByFilePath orders the results by the file_path field.
func ByFilePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilePath, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByFileType orders the results by the file_type field.
func ByFileType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileType, opts...).ToFunc()
}

// ByLiveShowUploadCount orders the results by live_show_upload count.
func ByLiveShowUploadCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLiveShowUploadStep(), opts...)
	}
}

// ByLiveShowUpload orders the results by live_show_upload terms.
func ByLiveShowUpload(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLiveShowUploadStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLiveShowUploadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LiveShowUploadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, LiveShowUploadTable, LiveShowUploadColumn),
	)
}
