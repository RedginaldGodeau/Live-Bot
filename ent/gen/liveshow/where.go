// Code generated by ent, DO NOT EDIT.

package liveshow

import (
	"backend/ent/gen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldCreateTime, v))
}

// Legend applies equality check predicate on the "legend" field. It's identical to LegendEQ.
func Legend(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldLegend, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldDuration, v))
}

// Viewed applies equality check predicate on the "viewed" field. It's identical to ViewedEQ.
func Viewed(v bool) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldViewed, v))
}

// CurrentPlayed applies equality check predicate on the "currentPlayed" field. It's identical to CurrentPlayedEQ.
func CurrentPlayed(v bool) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldCurrentPlayed, v))
}

// StartedTime applies equality check predicate on the "started_time" field. It's identical to StartedTimeEQ.
func StartedTime(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldStartedTime, v))
}

// EndedTime applies equality check predicate on the "ended_time" field. It's identical to EndedTimeEQ.
func EndedTime(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldEndedTime, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLTE(FieldCreateTime, v))
}

// LegendEQ applies the EQ predicate on the "legend" field.
func LegendEQ(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldLegend, v))
}

// LegendNEQ applies the NEQ predicate on the "legend" field.
func LegendNEQ(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNEQ(FieldLegend, v))
}

// LegendIn applies the In predicate on the "legend" field.
func LegendIn(vs ...string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldIn(FieldLegend, vs...))
}

// LegendNotIn applies the NotIn predicate on the "legend" field.
func LegendNotIn(vs ...string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNotIn(FieldLegend, vs...))
}

// LegendGT applies the GT predicate on the "legend" field.
func LegendGT(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGT(FieldLegend, v))
}

// LegendGTE applies the GTE predicate on the "legend" field.
func LegendGTE(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGTE(FieldLegend, v))
}

// LegendLT applies the LT predicate on the "legend" field.
func LegendLT(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLT(FieldLegend, v))
}

// LegendLTE applies the LTE predicate on the "legend" field.
func LegendLTE(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLTE(FieldLegend, v))
}

// LegendContains applies the Contains predicate on the "legend" field.
func LegendContains(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldContains(FieldLegend, v))
}

// LegendHasPrefix applies the HasPrefix predicate on the "legend" field.
func LegendHasPrefix(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldHasPrefix(FieldLegend, v))
}

// LegendHasSuffix applies the HasSuffix predicate on the "legend" field.
func LegendHasSuffix(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldHasSuffix(FieldLegend, v))
}

// LegendEqualFold applies the EqualFold predicate on the "legend" field.
func LegendEqualFold(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEqualFold(FieldLegend, v))
}

// LegendContainsFold applies the ContainsFold predicate on the "legend" field.
func LegendContainsFold(v string) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldContainsFold(FieldLegend, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLTE(FieldDuration, v))
}

// ViewedEQ applies the EQ predicate on the "viewed" field.
func ViewedEQ(v bool) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldViewed, v))
}

// ViewedNEQ applies the NEQ predicate on the "viewed" field.
func ViewedNEQ(v bool) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNEQ(FieldViewed, v))
}

// CurrentPlayedEQ applies the EQ predicate on the "currentPlayed" field.
func CurrentPlayedEQ(v bool) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldCurrentPlayed, v))
}

// CurrentPlayedNEQ applies the NEQ predicate on the "currentPlayed" field.
func CurrentPlayedNEQ(v bool) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNEQ(FieldCurrentPlayed, v))
}

// StartedTimeEQ applies the EQ predicate on the "started_time" field.
func StartedTimeEQ(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldStartedTime, v))
}

// StartedTimeNEQ applies the NEQ predicate on the "started_time" field.
func StartedTimeNEQ(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNEQ(FieldStartedTime, v))
}

// StartedTimeIn applies the In predicate on the "started_time" field.
func StartedTimeIn(vs ...time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldIn(FieldStartedTime, vs...))
}

// StartedTimeNotIn applies the NotIn predicate on the "started_time" field.
func StartedTimeNotIn(vs ...time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNotIn(FieldStartedTime, vs...))
}

// StartedTimeGT applies the GT predicate on the "started_time" field.
func StartedTimeGT(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGT(FieldStartedTime, v))
}

// StartedTimeGTE applies the GTE predicate on the "started_time" field.
func StartedTimeGTE(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGTE(FieldStartedTime, v))
}

// StartedTimeLT applies the LT predicate on the "started_time" field.
func StartedTimeLT(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLT(FieldStartedTime, v))
}

// StartedTimeLTE applies the LTE predicate on the "started_time" field.
func StartedTimeLTE(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLTE(FieldStartedTime, v))
}

// StartedTimeIsNil applies the IsNil predicate on the "started_time" field.
func StartedTimeIsNil() predicate.LiveShow {
	return predicate.LiveShow(sql.FieldIsNull(FieldStartedTime))
}

// StartedTimeNotNil applies the NotNil predicate on the "started_time" field.
func StartedTimeNotNil() predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNotNull(FieldStartedTime))
}

// EndedTimeEQ applies the EQ predicate on the "ended_time" field.
func EndedTimeEQ(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldEQ(FieldEndedTime, v))
}

// EndedTimeNEQ applies the NEQ predicate on the "ended_time" field.
func EndedTimeNEQ(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNEQ(FieldEndedTime, v))
}

// EndedTimeIn applies the In predicate on the "ended_time" field.
func EndedTimeIn(vs ...time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldIn(FieldEndedTime, vs...))
}

// EndedTimeNotIn applies the NotIn predicate on the "ended_time" field.
func EndedTimeNotIn(vs ...time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNotIn(FieldEndedTime, vs...))
}

// EndedTimeGT applies the GT predicate on the "ended_time" field.
func EndedTimeGT(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGT(FieldEndedTime, v))
}

// EndedTimeGTE applies the GTE predicate on the "ended_time" field.
func EndedTimeGTE(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldGTE(FieldEndedTime, v))
}

// EndedTimeLT applies the LT predicate on the "ended_time" field.
func EndedTimeLT(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLT(FieldEndedTime, v))
}

// EndedTimeLTE applies the LTE predicate on the "ended_time" field.
func EndedTimeLTE(v time.Time) predicate.LiveShow {
	return predicate.LiveShow(sql.FieldLTE(FieldEndedTime, v))
}

// EndedTimeIsNil applies the IsNil predicate on the "ended_time" field.
func EndedTimeIsNil() predicate.LiveShow {
	return predicate.LiveShow(sql.FieldIsNull(FieldEndedTime))
}

// EndedTimeNotNil applies the NotNil predicate on the "ended_time" field.
func EndedTimeNotNil() predicate.LiveShow {
	return predicate.LiveShow(sql.FieldNotNull(FieldEndedTime))
}

// HasUpload applies the HasEdge predicate on the "upload" edge.
func HasUpload() predicate.LiveShow {
	return predicate.LiveShow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UploadTable, UploadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUploadWith applies the HasEdge predicate on the "upload" edge with a given conditions (other predicates).
func HasUploadWith(preds ...predicate.Upload) predicate.LiveShow {
	return predicate.LiveShow(func(s *sql.Selector) {
		step := newUploadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LiveShow) predicate.LiveShow {
	return predicate.LiveShow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LiveShow) predicate.LiveShow {
	return predicate.LiveShow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LiveShow) predicate.LiveShow {
	return predicate.LiveShow(sql.NotPredicates(p))
}
