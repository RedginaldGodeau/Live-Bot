// Code generated by ent, DO NOT EDIT.

package liveshow

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the liveshow type in the database.
	Label = "live_show"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldLegend holds the string denoting the legend field in the database.
	FieldLegend = "legend"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldViewed holds the string denoting the viewed field in the database.
	FieldViewed = "viewed"
	// FieldCurrentPlayed holds the string denoting the currentplayed field in the database.
	FieldCurrentPlayed = "current_played"
	// FieldStartedTime holds the string denoting the started_time field in the database.
	FieldStartedTime = "started_time"
	// FieldEndedTime holds the string denoting the ended_time field in the database.
	FieldEndedTime = "ended_time"
	// EdgeUpload holds the string denoting the upload edge name in mutations.
	EdgeUpload = "upload"
	// Table holds the table name of the liveshow in the database.
	Table = "live_shows"
	// UploadTable is the table that holds the upload relation/edge.
	UploadTable = "live_shows"
	// UploadInverseTable is the table name for the Upload entity.
	// It exists in this package in order to avoid circular dependency with the "upload" package.
	UploadInverseTable = "uploads"
	// UploadColumn is the table column denoting the upload relation/edge.
	UploadColumn = "live_show_upload"
)

// Columns holds all SQL columns for liveshow fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldLegend,
	FieldDuration,
	FieldViewed,
	FieldCurrentPlayed,
	FieldStartedTime,
	FieldEndedTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "live_shows"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"live_show_upload",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultViewed holds the default value on creation for the "viewed" field.
	DefaultViewed bool
	// DefaultCurrentPlayed holds the default value on creation for the "currentPlayed" field.
	DefaultCurrentPlayed bool
)

// OrderOption defines the ordering options for the LiveShow queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByLegend orders the results by the legend field.
func ByLegend(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLegend, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByViewed orders the results by the viewed field.
func ByViewed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViewed, opts...).ToFunc()
}

// ByCurrentPlayed orders the results by the currentPlayed field.
func ByCurrentPlayed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentPlayed, opts...).ToFunc()
}

// ByStartedTime orders the results by the started_time field.
func ByStartedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedTime, opts...).ToFunc()
}

// ByEndedTime orders the results by the ended_time field.
func ByEndedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndedTime, opts...).ToFunc()
}

// ByUploadField orders the results by upload field.
func ByUploadField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploadStep(), sql.OrderByField(field, opts...))
	}
}
func newUploadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploadInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UploadTable, UploadColumn),
	)
}
